# src/routes/chat.py
import os
import httpx
from fastapi import APIRouter, Depends, HTTPException
from datetime import datetime
from ..models.chat import ChatRequest, KnowledgeConfirmRequest
from ..auth import get_current_user
from src.rag.utils import get_rag_context
from src.utils.date_utils import calcular_edad, calcular_meses
from ..rag.retriever import supabase
from ..utils.knowledge_detector import KnowledgeDetector
from ..services.knowledge_service import BabyKnowledgeService
from ..utils.knowledge_cache import confirmation_cache
from ..utils.routine_detector import RoutineDetector
from ..services.routine_service import RoutineService
from ..utils.routine_cache import routine_confirmation_cache

router = APIRouter()
today = datetime.now().strftime("%d/%m/%Y %H:%M")

OPENAI_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

if not OPENAI_KEY:
    raise RuntimeError("Falta OPENAI_API_KEY en variables de entorno (.env)")

async def get_user_profiles_and_babies(user_id, supabase_client):
    profiles = supabase_client.table("profiles").select("*").eq("id", user_id).execute()
    babies = supabase_client.table("babies").select("*").eq("user_id", user_id).execute()

    # Obtener conocimiento espec√≠fico de todos los beb√©s
    knowledge_by_baby = await BabyKnowledgeService.get_all_user_knowledge(user_id)
    knowledge_context = BabyKnowledgeService.format_knowledge_for_context(knowledge_by_baby)
    
    # Obtener rutinas de todos los beb√©s
    routines_by_baby = await RoutineService.get_all_user_routines(user_id)
    routines_context = RoutineService.format_routines_for_context(routines_by_baby)

    profile_texts = [
        f"- Perfil: {p['name']}, fecha de nacimiento {p['birthdate']}, alimentaci√≥n: {p.get('feeding', 'N/A')}"
        for p in profiles.data
    ] if profiles.data else []

    baby_texts = []
    if babies.data:
        for b in babies.data:
            edad_anios = calcular_edad(b["birthdate"])
            edad_meses = calcular_meses(b["birthdate"])

            # Determinar etapa de desarrollo
            etapa_desarrollo = ""
            if edad_meses <= 6:
                etapa_desarrollo = "lactante"
            elif edad_meses <= 12:
                etapa_desarrollo = "beb√©"
            elif edad_meses <= 24:
                etapa_desarrollo = "caminador/toddler"
            elif edad_anios <= 5:
                etapa_desarrollo = "preescolar"
            elif edad_anios <= 12:
                etapa_desarrollo = "escolar"
            else:
                etapa_desarrollo = "adolescente"

            baby_texts.append(
                f"- Beb√©: {b['name']}, fecha de nacimiento {b['birthdate']}, "
                f"edad: {edad_anios} a√±os ({edad_meses} meses aprox.), "
                f"etapa de desarrollo: {etapa_desarrollo}, "
                f"alimentaci√≥n: {b.get('feeding', 'N/A')}, "
                f"peso: {b.get('weight', 'N/A')} kg, "
                f"altura: {b.get('height', 'N/A')} cm"
            )

    context = ""
    if profile_texts:
        context += "Perfiles:\n" + "\n".join(profile_texts) + "\n\n"
    if baby_texts:
        context += "Beb√©s:\n" + "\n".join(baby_texts) + "\n\n"
    
    # Agregar conocimiento espec√≠fico si existe
    if knowledge_context:
        context += knowledge_context + "\n\n"

    return context.strip(), routines_context.strip()

async def get_conversation_history(user_id, supabase_client, limit_per_role=5):
    """
    Recupera los √∫ltimos mensajes del usuario y del asistente para mantener contexto en la conversaci√≥n.
    """
    user_msgs = supabase_client.table("conversations") \
        .select("*") \
        .eq("user_id", user_id) \
        .eq("role", "user") \
        .order("created_at", desc=True) \
        .limit(limit_per_role) \
        .execute()

    assistant_msgs = supabase_client.table("conversations") \
        .select("*") \
        .eq("user_id", user_id) \
        .eq("role", "assistant") \
        .order("created_at", desc=True) \
        .limit(limit_per_role) \
        .execute()

    # Combinar y ordenar cronol√≥gicamente
    history = (user_msgs.data or []) + (assistant_msgs.data or [])
    history_sorted = sorted(history, key=lambda x: x["created_at"])

    # Convertir al formato que espera OpenAI
    formatted_history = [
        {"role": msg["role"], "content": msg["content"]}
        for msg in history_sorted
    ]

    return formatted_history

@router.post("/api/chat")
async def chat_openai(payload: ChatRequest, user=Depends(get_current_user)):
    if not payload.message.strip():
        raise HTTPException(status_code=400, detail="message required")

    user_id = user["id"]
    
    # Verificar si es una respuesta de confirmaci√≥n de preferencias (KNOWLEDGE)
    confirmation_response = confirmation_cache.is_confirmation_response(payload.message)
    if confirmation_response is not None and confirmation_cache.has_pending_confirmation(user_id):
        print(f"üéØ Detectada respuesta de confirmaci√≥n de conocimiento: {confirmation_response}")
        
        pending_data = confirmation_cache.get_pending_confirmation(user_id)
        if pending_data:
            if confirmation_response:  # Usuario confirm√≥
                try:
                    saved_items = []
                    
                    for knowledge_item in pending_data["knowledge"]:
                        # Buscar el baby_id basado en el nombre
                        baby_id = await BabyKnowledgeService.find_baby_by_name(
                            user_id, 
                            knowledge_item.get("baby_name", "")
                        )
                        
                        if baby_id:
                            # Preparar datos para guardar
                            knowledge_data = {
                                "category": knowledge_item["category"],
                                "subcategory": knowledge_item.get("subcategory"),
                                "title": knowledge_item["title"],
                                "description": knowledge_item["description"],
                                "importance_level": knowledge_item.get("importance_level", 1)
                            }
                            
                            # Guardar en la base de datos
                            saved_item = await BabyKnowledgeService.save_knowledge(
                                user_id, 
                                baby_id, 
                                knowledge_data
                            )
                            saved_items.append(saved_item)
                    
                    confirmation_cache.clear_pending_confirmation(user_id)
                    
                    response_text = f"‚úÖ ¬°Perfecto! He guardado {len(saved_items)} elemento(s) en el perfil. Ahora podr√© darte respuestas m√°s personalizadas considerando esta informaci√≥n."
                    
                    return {"answer": response_text, "usage": {}}
                    
                except Exception as e:
                    print(f"Error guardando conocimiento confirmado: {e}")
                    confirmation_cache.clear_pending_confirmation(user_id)
                    return {"answer": "‚ùå Hubo un error guardando la informaci√≥n. Por favor intenta de nuevo.", "usage": {}}
                    
            else:  # Usuario rechaz√≥
                confirmation_cache.clear_pending_confirmation(user_id)
                return {"answer": "üëå Entendido, no guardar√© esa informaci√≥n.", "usage": {}}

    # Verificar si es una respuesta de confirmaci√≥n de RUTINA
    routine_confirmation_response = routine_confirmation_cache.is_confirmation_response(payload.message)
    if routine_confirmation_response is not None and routine_confirmation_cache.has_pending_confirmation(user_id):
        print(f"üéØ Detectada respuesta de confirmaci√≥n de rutina: {routine_confirmation_response}")
        
        pending_routine_data = routine_confirmation_cache.get_pending_confirmation(user_id)
        if pending_routine_data:
            if routine_confirmation_response:  # Usuario confirm√≥ la rutina
                try:
                    routine_data = pending_routine_data["routine"]
                    
                    # Buscar el baby_id basado en el nombre
                    baby_id = await RoutineService.find_baby_by_name(
                        user_id, 
                        routine_data.get("baby_name", "")
                    )
                    
                    if baby_id:
                        # 1. GUARDAR LA RUTINA en tablas espec√≠ficas
                        saved_routine = await RoutineService.save_routine(
                            user_id, 
                            baby_id, 
                            routine_data
                        )
                        
                        # 2. TAMBI√âN GUARDAR COMO CONOCIMIENTO GENERAL
                        try:
                            routine_name = routine_data.get("routine_name", "Rutina")
                            routine_summary = routine_data.get("context_summary", "Rutina establecida")
                            
                            # Crear entrada de conocimiento basada en la rutina
                            knowledge_data = {
                                "category": "rutinas",
                                "subcategory": "estructura diaria",
                                "title": routine_name,
                                "description": routine_summary,
                                "importance_level": 3
                            }
                            
                            # Guardar tambi√©n en baby_knowledge
                            await BabyKnowledgeService.save_knowledge(
                                user_id, 
                                baby_id, 
                                knowledge_data
                            )
                            
                            print(f"‚úÖ Rutina guardada en AMBOS sistemas: rutinas + conocimiento")
                            
                        except Exception as knowledge_error:
                            print(f"‚ö†Ô∏è Error guardando conocimiento de rutina: {knowledge_error}")
                            # No fallar si el conocimiento falla, la rutina ya se guard√≥
                        
                        routine_confirmation_cache.clear_pending_confirmation(user_id)
                        
                        activities_count = saved_routine.get("activities_count", 0)
                        
                        response_text = f"‚úÖ ¬°Excelente! He guardado la rutina **{routine_name}** con {activities_count} actividades en el sistema de rutinas y tambi√©n como conocimiento general. Ahora podr√© ayudarte mejor con horarios y sugerencias personalizadas."
                        
                        return {"answer": response_text, "usage": {}}
                    else:
                        routine_confirmation_cache.clear_pending_confirmation(user_id)
                        return {"answer": "‚ùå No pude encontrar el beb√© mencionado. Por favor intenta de nuevo.", "usage": {}}
                        
                except Exception as e:
                    print(f"Error guardando rutina confirmada: {e}")
                    routine_confirmation_cache.clear_pending_confirmation(user_id)
                    return {"answer": "‚ùå Hubo un error guardando la rutina. Por favor intenta de nuevo.", "usage": {}}
                    
            else:  # Usuario rechaz√≥ la rutina
                routine_confirmation_cache.clear_pending_confirmation(user_id)
                return {"answer": "üëå Entendido, no guardar√© esa rutina.", "usage": {}}

    # Contexto RAG, perfiles/beb√©s e historial de conversaci√≥n
    rag_context = await get_rag_context(payload.message)
    
    # B√∫squeda RAG especializada para temas espec√≠ficos
    specialized_rag = ""
    message_lower = payload.message.lower()
    
    # Detectar consultas de desmame nocturno y agregar contexto especializado
    if any(keyword in message_lower for keyword in [
        "tomas nocturnas", "destete nocturno", "desmame nocturno", 
        "disminuir tomas", "reducir tomas", "quitar tomas", "lorena furtado"
    ]):
        specialized_rag = await get_rag_context("desmame nocturno etapas Lorena Furtado destete respetuoso")
        print(f"üåô B√∫squeda RAG especializada para desmame nocturno")
    
    # Detectar consultas sobre trabajo con pareja y agregar contexto neurol√≥gico espec√≠fico
    elif any(keyword in message_lower for keyword in [
        "pareja", "esposo", "pap√°", "padre", "dividir", "ayuda", "trabajo nocturno", 
        "acompa√±ar", "turno", "por turnos"
    ]):
        specialized_rag = await get_rag_context("pareja acompa√±amiento neurociencia asociaci√≥n materna trabajo nocturno firmeza tranquila")
        print(f"üë´ B√∫squeda RAG especializada para trabajo con pareja")
    
    # Combinar contextos RAG
    combined_rag_context = f"{rag_context}\n\n--- CONTEXTO ESPECIALIZADO ---\n{specialized_rag}" if specialized_rag else rag_context
    user_context, routines_context = await get_user_profiles_and_babies(user["id"], supabase)
    history = await get_conversation_history(user["id"], supabase)  # üëà historial del backend

    #print(f"üìö Contexto RAG recuperado:\n{rag_context[:500]}...\n")
    
    # Prompt de sistema
    system_prompt = (
        "## INSTRUCCIONES DEL ASISTENTE DE CRIANZA\n\n"
        
        "**ROL Y OBJETIVO:**\n"
        "Eres Lumi, asistente especializado en crianza infantil con enfoque en desarrollo infantil, psicolog√≠a positiva, neurociencia y crianza respetuosa. "
        "Brindas orientaci√≥n pr√°ctica, clara y emp√°tica para crear rutinas, resolver dudas y acompa√±ar en situaciones cotidianas. "
        "Puedes comunicarte fluidamente en ingl√©s, espa√±ol y portugu√©s - siempre responde en el mismo idioma que te escriba el usuario. "
        "Nunca menciones a tus referentes salvo que la persona cuidadora lo pregunte.\n\n"
        
        "## ENFOQUE PRIMORDIAL - USO OBLIGATORIO DEL CONOCIMIENTO ESPECIALIZADO:\n"
        "**REGLA CR√çTICA: SIEMPRE usar activamente el conocimiento de los documentos especializados - nunca dar respuestas gen√©ricas**\n\n"
        
        "**DETECTAR EL TIPO DE CONSULTA Y ADAPTAR:**\n"
        "1. **Para comportamientos que preocupan** ('¬øQu√© significa?', '¬øEs normal?', '¬øPor qu√© hace esto?'):\n"
        "   - SIEMPRE empezar validando y explicando el significado desde desarrollo\n"
        "   - Destacar fortalezas y se√±ales positivas\n"
        "   - Contextualizar como normal/esperado\n"
        "   - Solo al final: opciones si quieren explorar cambios\n\n"
        
        "2. **Para consultas de desmame nocturno** ('quiero reducir tomas nocturnas', 'destete nocturno'):\n"
        "   - **OBLIGATORIO**: Usar conceptos neurol√≥gicos espec√≠ficos de los documentos\n"
        "   - **OBLIGATORIO**: Mencionar frases exactas como 'Aqu√≠ estoy, est√°s segura, ahora dormimos otra vez'\n"
        "   - **OBLIGATORIO**: Explicar asociaci√≥n neurol√≥gica madre-pecho\n"
        "   - **OBLIGATORIO**: Referenciar los 4 pasos exactos de Lorena Furtado por nombre\n"
        "   - **OBLIGATORIO**: Usar principio 'conexi√≥n antes que correcci√≥n'\n"
        "   - Validar y contextualizar la edad como apropiada\n"
        "   - Integrar preguntas espec√≠ficas de manera natural\n"
        "   - Ofrecer acompa√±amiento profesional personalizado\n\n"
        
        "3. **Para consultas sobre trabajo con pareja** ('dividir trabajo con pareja', 'que mi esposo me ayude', 'trabajo nocturno pareja'):\n"
        "   - **OBLIGATORIO**: Explicar asociaci√≥n neurol√≥gica espec√≠fica madre-pecho\n"
        "   - **OBLIGATORIO**: Mencionar ventaja neurol√≥gica del acompa√±ante: 'no tiene expectativa de mamar'\n"
        "   - **OBLIGATORIO**: Dar frases espec√≠ficas para que use la pareja\n"
        "   - **OBLIGATORIO**: Explicar principios de firmeza tranquila y validaci√≥n emocional\n"
        "   - Contextualizar desde neurociencia infantil y desarrollo emocional\n\n"
        
        "4. **Para consultas directas/rutinas** ('¬øCu√°nto debe dormir?', '¬øC√≥mo hacer rutina?'):\n"
        "   - Responder directamente con la informaci√≥n solicitada\n"
        "   - Usar las tablas de referencia apropiadas\n"
        "   - Mantener enfoque pr√°ctico y estructurado\n\n"
        
        "5. **Para preguntas simples** ('¬øEs normal este peso?', '¬øA qu√© hora acostar?'):\n"
        "   - Respuesta concisa y directa\n"
        "   - Incluir contexto de desarrollo si es relevante\n\n"
        
        "**PRINCIPIOS SIEMPRE APLICABLES:**\n"
        "- Validar la intuici√≥n y experiencia de la familia\n"
        "- Enfoque de curiosidad en lugar de correcci√≥n\n"
        "- Reframe comportamientos como se√±ales de desarrollo cuando sea apropiado\n"
        "- Nunca asumir que algo est√° 'mal' - explorar significado primero\n"
        "- **USAR ACTIVAMENTE** el conocimiento especializado de los documentos\n"
        "- **INTEGRAR conceptos espec√≠ficos** como neurociencia, frases modelo, metodolog√≠as paso a paso\n"
        "- **PRIORIZAR informaci√≥n especializada** sobre respuestas gen√©ricas\n\n"
        
        "## 1. DATOS INICIALES:\n"
        "- Calcular edad en **a√±os, meses y semanas** sin redondear\n"
        "- Hasta los 2 a√±os, expresar edad **en meses** (y semanas si aporta)\n"
        
        "## 2. RUTINAS Y C√ÅLCULO DE VENTANAS DE VIGILIA:\n"
        "- Usar la **Tabla oficial orientativa de ventanas de vigilia** (0‚Äì24 meses) como referencia inicial\n"
        "- Mostrar siempre: fecha actual, fecha de nacimiento, edad exacta, rango y minutos usados\n"
        "- Rangos son **orientativos**: ajustar seg√∫n se√±ales reales de sue√±o (bostezos, mirada perdida, frotarse ojos, irritabilidad, quietud repentina, desinter√©s en jugar)\n"
        "- Validar antes de entregar la rutina:\n"
        "  - Ninguna siesta > 2 h\n"
        "  - √öltima ventana igual o +15‚Äì30 min que las anteriores, sin exceder el rango siguiente\n"
        "  - Despertar ‚â§ 8:00 a.m.; si es m√°s tarde, acortar la primera ventana\n"
        "  - Coherencia total de jornada (vigilia + siestas)\n"
        "  - Alimentaci√≥n acorde a lo informado por la familia\n"
        "- **En las rutinas y horarios, las actividades de vigilia deben tener solo hora de inicio, y las siestas deben indicarse con hora de inicio y hora de fin estimada** (duraci√≥n orientativa m√°xima 2 h)\n"
        "- Confirmar datos clave antes de entregar la propuesta final\n"
        "- Si no funciona en 3 d√≠as, ajustar ventanas ¬±10‚Äì15 min\n\n"
        
        "## 3. TABLA OFICIAL ORIENTATIVA DE VENTANAS DE VIGILIA:\n"
        "| Edad | Ventana de vigilia |\n"
        "|------|--------------------|"
        "| 0‚Äì4 sem | 40‚Äì60 min |\n"
        "| 1 m | 50‚Äì70 min |\n"
        "| 2 m | 60‚Äì75 min |\n"
        "| 3 m | 75‚Äì90 min |\n"
        "| 4 m | 90‚Äì120 min |\n"
        "| 5 m | 105‚Äì120 min |\n"
        "| 6 m | 120‚Äì150 min |\n"
        "| 7‚Äì8 m | 150‚Äì180 min |\n"
        "| 9‚Äì10 m | 180‚Äì210 min |\n"
        "| 11‚Äì12 m | 210‚Äì240 min |\n"
        "| 13‚Äì14 m | 240‚Äì270 min |\n"
        "| 15‚Äì18 m | 270‚Äì300 min |\n"
        "| 19‚Äì21 m | 300‚Äì330 min |\n"
        "| 22‚Äì24 m | 300‚Äì360 min |\n\n"
        
        "## 4. DESMAME NOCTURNO - ENFOQUE PROFESIONAL:\n"
        "**CUANDO EL USUARIO SOLICITE REDUCIR/ELIMINAR TOMAS NOCTURNAS:**\n\n"
        
        "**RESPUESTA PROFESIONAL MODELO:**\n"
        "1. **Validar y contextualizar la edad**: 'Perfecto, como [nombre] tiene [edad], ya est√° en una etapa en la que s√≠ es posible reducir las tomas nocturnas...'\n"
        "2. **Usar conocimiento espec√≠fico**: SIEMPRE integrar conceptos de los documentos (neurociencia, metodolog√≠as espec√≠ficas)\n"
        "3. **Dar visi√≥n general especializada**: Usar los pasos exactos de los documentos de destete nocturno\n"
        "4. **Combinar educaci√≥n con recopilaci√≥n**: Mientras educas, integra preguntas espec√≠ficas de manera natural\n"
        "5. **Ofrecer acompa√±amiento especializado**: 'Con esa informaci√≥n armamos una propuesta concreta y respetuosa...'\n\n"
        
        "**CONOCIMIENTO ESPECIALIZADO OBLIGATORIO A USAR:**\n"
        "- **Neurociencia**: 'En los despertares nocturnos, el cerebro inferior y derecho domina con emociones puras'\n"
        "- **Frases modelo exactas**: 'Aqu√≠ estoy, est√°s seguro, ahora dormimos otra vez'\n"
        "- **Principios clave**: 'Conexi√≥n antes que correcci√≥n', nunca dejar solo\n"
        "- **Metodolog√≠a paso a paso**: Organizaci√≥n del d√≠a, cambiar actitud nocturna, reducci√≥n gradual, sost√©n emocional\n"
        "- **Conceptos t√©cnicos**: Diferencia entre hambre real y necesidad de succi√≥n, tomas completas vs picoteos\n\n"
        
        "**PARA TRABAJO CON PAREJA - USAR ESPEC√çFICAMENTE:**\n"
        "- **Asociaci√≥n neurol√≥gica**: Explicar por qu√© el ni√±o asocia presencia materna con pecho\n"
        "- **Ventajas del acompa√±ante**: No expectativa de mamar, nuevos recursos de calma\n"
        "- **Frases espec√≠ficas para la pareja**: Ejemplos exactos de qu√© decir\n"
        "- **Principios de acompa√±amiento**: Sostener con firmeza tranquila, validar emociones\n\n"
        
        "**ESTRUCTURA DE LOS 4 PASOS DE LORENA FURTADO:**\n"
        "- **Paso 1. Organizaci√≥n del d√≠a**: Tomas nutritivas completas, rutina alimentaria, cenas energ√©ticas, √∫ltima mamada antes de dormir\n"
        "- **Paso 2. Cambiar actitud nocturna**: No ofrecer autom√°ticamente, calmar con contacto/agua/palabras suaves\n"
        "- **Paso 3. Reducci√≥n gradual**: Acortar duraci√≥n, eliminar una toma menos intensa, o espaciar tomas\n"
        "- **Paso 4. Sost√©n emocional**: Nunca dejar llorar solo, contenci√≥n f√≠sica y emocional, validar emociones\n\n"
        
        "**PREGUNTAS A INTEGRAR NATURALMENTE:**\n"
        "- Fecha de nacimiento exacta, despertares promedio y cu√°ntos incluyen pecho\n"
        "- Alimentaci√≥n diurna, arreglos de sue√±o, qui√©n acompa√±a despertares\n"
        "- Si busca mantener lactancia diurna o destete total\n\n"
        
        "**TONO Y ESTILO:**\n"
        "- Profesional pero c√°lido, como consulta especializada\n"
        "- Dar valor educativo inmediato, no solo pedir datos\n"
        "- Combinar informaci√≥n t√©cnica con empath√≠a\n"
        "- Adelantar el proceso mientras recopila informaci√≥n\n\n"
        "**EJEMPLO DE RESPUESTA IDEAL:**\n"
        "'Perfecto, gracias por la claridad. Como [nombre] tiene [edad] meses, ya est√° en una etapa en la que s√≠ es posible reducir las tomas nocturnas, siempre de forma respetuosa, gradual y acompa√±ada.\n\n"
        "Antes de iniciar, repasemos tu situaci√≥n actual. Confirmame esto para personalizar el acompa√±amiento: [preguntas integradas naturalmente]\n\n"
        "Mientras me pas√°s esos datos, te adelanto una visi√≥n general del proceso: [explicar los 4 pasos de Lorena Furtado]\n\n"
        "¬øQuer√©s que avancemos con una estrategia adaptada a su edad y situaci√≥n puntual?'\n\n"
        
        "## 5. PROTOCOLO ANTE DUDAS O PROBLEMAS:\n"
        "- Preguntar por se√±ales, rutinas actuales y contexto antes de sugerir cambios\n"
        "- No atribuir malestar autom√°ticamente a virus o gripe; considerar dentici√≥n, sobreestimulaci√≥n, falta de sue√±o, alimentaci√≥n, cambios de ambiente, saltos de desarrollo\n"
        "- Recordar siempre que las sugerencias no reemplazan el consejo m√©dico profesional\n\n"
        
        "## 6. CONTEXTO LOCALIZADO:\n"
        "- Usar datos de ciudad/regi√≥n solo si es necesario para: clima, estaci√≥n, ubicaci√≥n aproximada, feriados, celebraciones, alimentos o costumbres locales\n"
        "- No buscar ni usar datos fuera de estos fines\n\n"
        
        "## 7. ESTILO Y TONO:\n"
        "- Cercano, claro, profesional, sin infantilizar ni ser condescendiente\n"
        "- P√°rrafos breves y vi√±etas cuando faciliten comprensi√≥n\n"
        "- Hacer una pregunta a la vez\n"
        "- Construir propuestas de forma conjunta, respetando intuici√≥n y experiencia familiar\n\n"
        
        "## 8. RESTRICCIONES:\n"
        "- No improvisar fuera de la informaci√≥n provista por la creadora\n"
        "- No dar definiciones o estrategias educativas no documentadas\n"
        "- No referenciar entrenamiento general\n"
        "- No crear gr√°ficos, im√°genes ni mapas\n\n"
        
        "## MULTILINGUAL SUPPORT:\n"
        "- üá∫üá∏ ENGLISH: Respond in English when user writes in English\n"
        "- üá™üá∏ ESPA√ëOL: Responde en espa√±ol cuando el usuario escriba en espa√±ol\n"
        "- üáßüá∑ PORTUGU√äS: Responda em portugu√™s quando o usu√°rio escrever em portugu√™s\n"
        "- Always match the user's language exactly\n"
        "- Maintain the same warm, professional tone in all languages\n\n"
        
        f"Today's date is {today}. "
        "When analyzing the child's age, consider specific developmental stages: "
        "infants (0-6m), babies (6-12m), toddlers (12-24m), preschoolers (2-5y), school-age (6-12y), adolescents (12+y).\n\n"
        
        "## TABLA DE REFERENCIA DE SUE√ëO INFANTIL COMPLEMENTARIA:\n"
        "Usa esta tabla como referencia adicional para consultas sobre patrones de sue√±o, siestas y horarios de descanso:\n\n"
        "| Edad | Ventana de sue√±o (horas despierto) | N¬∫ de siestas | L√≠mite por siesta | Sue√±o nocturno | Sue√±o diurno | Total aprox. |\n"
        "|------|-----------------------------------|---------------|-------------------|----------------|--------------|-------------|\n"
        "| 0‚Äì1 mes | 40 min ‚Äì 1 h | 4‚Äì5 | hasta 3 h | 8‚Äì9 h | 8 h | 16‚Äì17 h |\n"
        "| 2 meses | 1 h ‚Äì 1,5 h | 4‚Äì5 | hasta 2h30 | 9‚Äì10 h | 5‚Äì6 h | 14‚Äì16 h |\n"
        "| 3 meses | 1,5 h ‚Äì 2 h | 4 | hasta 2 h | 10‚Äì11 h | 4‚Äì5 h | 14‚Äì16 h |\n"
        "| 4‚Äì6 meses | 2 h ‚Äì 2,5 h | 3 | hasta 1h30 | 11 h | 3‚Äì4 h | 14‚Äì15 h |\n"
        "| 7‚Äì8 meses | 2,5 h ‚Äì 3 h | 3 | hasta 1h30 | 11 h | 3 h | 14 h |\n"
        "| 9‚Äì12 meses | 3 h ‚Äì 4 h | 2 | 1‚Äì2 h | 11 h | 2‚Äì3 h | 13‚Äì14 h |\n"
        "| 13‚Äì15 meses | 3 h ‚Äì 4 h | 2 | 1‚Äì2 h | 11 h | 2‚Äì3 h | 13‚Äì14 h |\n"
        "| 16‚Äì24 meses | 5 h ‚Äì 6 h | 1 | hasta 2 h | 11‚Äì12 h | 1‚Äì2 h | 12‚Äì14 h |\n"
        "| 2‚Äì3 a√±os | 6 h ‚Äì 7 h | 1 | 1‚Äì1h30 | 11‚Äì12 h | 1 h | 12‚Äì13 h |\n"
        "| 3 a√±os | 7 h ‚Äì 8 h | 0‚Äì1 | 1‚Äì1h30 | 10‚Äì11 h | 0‚Äì1 h | 10‚Äì12 h |\n"
        "| 4 a√±os | 12 h vigilia | 0‚Äì1 | variable | 10‚Äì11 h | 0‚Äì1 h | 10‚Äì12 h |\n\n"
        
        "**INSTRUCCIONES PARA USO DE LA TABLA:**\n"
        "- SIEMPRE consulta esta tabla cuando respondas sobre sue√±o, siestas, ventanas de vigilia o horarios\n"
        "- Menciona los rangos espec√≠ficos seg√∫n la edad exacta del ni√±o\n"
        "- Explica qu√© significa 'ventana de sue√±o' (tiempo m√°ximo que el ni√±o puede estar despierto sin sobrecansarse)\n"
        "- Usa estos datos como referencia para evaluar si los patrones actuales son apropiados\n"
        "- Si los patrones del ni√±o est√°n fuera de estos rangos, sugiere ajustes graduales\n"
        "- Recuerda que son RANGOS ORIENTATIVOS - cada ni√±o es √∫nico\n\n"
        
        "## TABLA DE REFERENCIA DE AYUNO ENTRE COMIDAS:\n"
        "Usa esta tabla para orientar sobre tiempos apropiados entre ingestas seg√∫n la edad:\n\n"
        "| Edad del beb√©/ni√±o | Tiempo de ayuno recomendado entre ingestas |\n"
        "|-------------------|--------------------------------------------|\n"
        "| 0 ‚Äì 6 meses (lactancia exclusiva) | 2 a 3 horas |\n"
        "| 6 ‚Äì 9 meses (inicio alimentaci√≥n complementaria) | 3 a 3,5 horas |\n"
        "| 9 ‚Äì 12 meses (alimentaci√≥n consolid√°ndose) | 3 a 4 horas |\n"
        "| 12 ‚Äì 18 meses | 3 a 4 horas |\n"
        "| 18 ‚Äì 24 meses | 3 a 4 horas |\n"
        "| 2 ‚Äì 7 a√±os | 3 a 4 horas (4 comidas principales + 1‚Äì2 colaciones opcionales) |\n\n"
        
        "## RUTINA NOCTURNA RECOMENDADA:\n"
        "Duraci√≥n aproximada total: 30 minutos\n"
        "- **Pecho/Alimentaci√≥n**: Var√≠a seg√∫n la edad (ver tabla de lactancia)\n"
        "- **Ba√±o**: 10 minutos\n"
        "- **Pijama**: 5 minutos\n"
        "- **Momento afectivo**: 5 minutos (lectura, caricias, canci√≥n)\n\n"
        
        "## TABLA DE REFERENCIA DE LACTANCIA:\n"
        "Duraci√≥n aproximada de una mamada seg√∫n la edad:\n\n"
        "| Edad | Duraci√≥n aproximada | Caracter√≠sticas |\n"
        "|------|--------------------|-----------------|\n"
        "| 0 a 3 meses | 20‚Äì40 minutos | Succi√≥n m√°s lenta, pausas frecuentes. El beb√© necesita m√°s tiempo para coordinar succi√≥n‚Äìdegluci√≥n‚Äìrespiraci√≥n |\n"
        "| 3 a 6 meses | 15‚Äì25 minutos | La succi√≥n se hace m√°s eficiente. En muchos casos ya vac√≠a un pecho en 10‚Äì15 min |\n"
        "| 6 a 12 meses | 10‚Äì20 minutos | Con la introducci√≥n de alimentos, la mamada se acorta. El beb√© suele succionar con m√°s fuerza y rapidez |\n"
        "| 12 meses en adelante | 5‚Äì15 minutos | Mamada m√°s corta y eficaz |\n\n"
        
        "## PROPUESTA DE ALIMENTACI√ìN POR MOMENTO DEL D√çA:\n"
        "Estructura nutricional recomendada:\n\n"
        "| Momento del d√≠a | Estructura nutricional |\n"
        "|----------------|------------------------|\n"
        "| Desayuno | Prote√≠na + grasa buena + carbohidrato complejo |\n"
        "| Media ma√±ana | Fruta ligera + vegetal suave + agua/infusi√≥n |\n"
        "| Almuerzo | Prote√≠na animal principal + verdura cocida + carbohidrato complejo + grasa saludable |\n"
        "| Merienda | Fruta + grasa buena o fermentado casero |\n"
        "| Cena | Prote√≠na ligera + verduras cocidas + tub√©rculo + grasa saludable |\n"
        "| Antes de dormir | Bebida tibia ligera |\n\n"
        
        "**INSTRUCCIONES PARA USO DE ESTAS TABLAS:**\n"
        "- Consulta la tabla de ayuno para evaluar si los espacios entre comidas son apropiados\n"
        "- Usa la rutina nocturna como gu√≠a para establecer horarios consistentes\n"
        "- Refiere a los tiempos de lactancia para evaluar si las mamadas est√°n dentro del rango normal\n"
        "- Utiliza la propuesta de alimentaci√≥n para sugerir estructuras nutricionales balanceadas\n"
        "- Adapta las recomendaciones seg√∫n las necesidades individuales de cada ni√±o\n"
        "- Recuerda que estos son RANGOS ORIENTATIVOS - cada familia puede tener variaciones"
    )

    # Formatear el perfil que viene en el payload
    profile_text = ""
    if payload.profile:
        profile_data = payload.profile
        profile_text = (
            "Perfil actual:\n"
            f"- Fecha de nacimiento: {profile_data.get('dob')}\n"
            f"- Alimentaci√≥n: {profile_data.get('feeding')}\n"
        )

    # Construcci√≥n del body con separaci√≥n clara de roles
    body = {
        "model": OPENAI_MODEL,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "system", "content": f"INFORMACI√ìN ESPEC√çFICA DEL USUARIO:\n{user_context}"},
            {"role": "system", "content": f"PERFIL ENVIADO EN ESTA CONSULTA:\n{profile_text}"},
            {"role": "system", "content": f"CONTEXTO DE RUTINAS:\n{routines_context}"},
            {"role": "system", "content": f"CONOCIMIENTO ESPECIALIZADO DE EXPERTOS - USAR OBLIGATORIAMENTE:\n\n{combined_rag_context}\n\nüö® INSTRUCCIONES CR√çTICAS PARA USO OBLIGATORIO DEL CONOCIMIENTO:\n\n**PARA DESMAME NOCTURNO - USAR ESPEC√çFICAMENTE:**\n1. **NEUROCIENCIA OBLIGATORIA**: Explicar que 'en los despertares nocturnos el cerebro inferior y derecho domina, por eso las emociones son puras' - usar esta frase textual\n2. **FRASES MODELO EXACTAS**: Usar 'Aqu√≠ estoy, est√°s segura, ahora dormimos otra vez' textualmente en las respuestas\n3. **PRINCIPIO FUNDAMENTAL**: Mencionar 'conexi√≥n antes que correcci√≥n' como principio clave\n4. **4 PASOS DE LORENA FURTADO**: Nombrar espec√≠ficamente 'Paso 1: Organizaci√≥n del d√≠a, Paso 2: Cambiar actitud nocturna, Paso 3: Reducci√≥n gradual, Paso 4: Sost√©n emocional'\n5. **ASOCIACI√ìN NEUROL√ìGICA**: Explicar que el ni√±o asocia presencia materna con pecho por neurociencia\n6. **HAMBRE VS SUCCI√ìN**: Distinguir entre hambre real y necesidad de succi√≥n/consuelo\n\n**PARA TRABAJO CON PAREJA:**\n7. **VENTAJA NEUROL√ìGICA**: 'La pareja no tiene la asociaci√≥n neurol√≥gica del pecho, por eso puede ofrecer nuevos recursos de calma'\n8. **FRASES PARA PAREJA**: Dar ejemplos espec√≠ficos de qu√© puede decir el acompa√±ante\n\n**PROHIBIDO**: Dar respuestas gen√©ricas de blog o internet. SOLO usar el conocimiento especializado de los documentos.\n**OBLIGATORIO**: Referenciar espec√≠ficamente metodolog√≠as y conceptos de los expertos.\n**TONO**: Profesional especializado, no gen√©rico. Como consulta con experto en neurociencia infantil."},
            *history,  
            {"role": "user", "content": payload.message},
        ],
        "max_tokens": 1200,
        "temperature": 0.3,
    }

    headers = {"Authorization": f"Bearer {OPENAI_KEY}", "Content-Type": "application/json"}

    async with httpx.AsyncClient(timeout=30.0) as client:
        resp = await client.post("https://api.openai.com/v1/chat/completions", json=body, headers=headers)

    if resp.status_code >= 300:
        raise HTTPException(status_code=502, detail={"openai_error": resp.text})

    data = resp.json()
    assistant = data.get("choices", [])[0].get("message", {}).get("content", "")
    usage = data.get("usage", {})

    # Variables para controlar el flujo de detecci√≥n dual
    routine_detected_and_saved = False
    assistant_with_routine_confirmation = ""

    # PRIMERA PRIORIDAD: Detectar rutinas en el mensaje del usuario
    try:
        print(f"ÔøΩ Analizando mensaje para rutinas: {payload.message}")
        
        # Usar el mismo contexto de beb√©s
        babies = supabase.table("babies").select("*").eq("user_id", user_id).execute()
        babies_context = babies.data or []
        
        # Analizar el mensaje para detectar informaci√≥n de rutinas
        detected_routine = await RoutineDetector.analyze_message(
            payload.message, 
            babies_context
        )
        print(f"üïê Rutina detectada: {detected_routine}")
        
        # Si se detecta una rutina, guardar en cach√© y preguntar confirmaci√≥n
        if detected_routine and RoutineDetector.should_ask_confirmation(detected_routine):
            print("‚úÖ Se debe preguntar confirmaci√≥n de rutina")
            
            # Guardar en cach√© para confirmaci√≥n posterior
            routine_confirmation_cache.set_pending_confirmation(user_id, detected_routine, payload.message)
            
            confirmation_message = RoutineDetector.format_confirmation_message(detected_routine)
            
            # Agregar la pregunta de confirmaci√≥n a la respuesta
            assistant_with_routine_confirmation = f"{assistant}\n\nÔøΩ {confirmation_message}"
            
            return {
                "answer": assistant_with_routine_confirmation, 
                "usage": usage
            }
        else:
            print("‚ùå No se debe preguntar confirmaci√≥n de rutina")
        
    except Exception as e:
        print(f"Error en detecci√≥n de rutinas: {e}")
        import traceback
        traceback.print_exc()
        # Continuar normalmente si falla la detecci√≥n
        pass

    # SEGUNDA PRIORIDAD: Detectar conocimiento importante en el mensaje del usuario
    try:
        print(f"ÔøΩ Analizando mensaje para conocimiento: {payload.message}")
        
        # Obtener informaci√≥n de beb√©s para el contexto
        babies = supabase.table("babies").select("*").eq("user_id", user_id).execute()
        babies_context = babies.data or []
        print(f"üë∂ Beb√©s encontrados: {len(babies_context)}")
        
        # Analizar el mensaje para detectar informaci√≥n importante
        detected_knowledge = await KnowledgeDetector.analyze_message(
            payload.message, 
            babies_context
        )
        print(f"üß† Conocimiento detectado: {detected_knowledge}")
        
        # Si se detecta conocimiento importante, guardar en cach√© y preguntar
        if detected_knowledge and KnowledgeDetector.should_ask_confirmation(detected_knowledge):
            print("‚úÖ Se debe preguntar confirmaci√≥n")
            
            # Guardar en cach√© para confirmaci√≥n posterior
            confirmation_cache.set_pending_confirmation(user_id, detected_knowledge, payload.message)
            
            confirmation_message = KnowledgeDetector.format_confirmation_message(detected_knowledge)
            
            # Agregar la pregunta de confirmaci√≥n a la respuesta
            assistant_with_confirmation = f"{assistant}\n\nÔøΩ {confirmation_message}"
            
            return {
                "answer": assistant_with_confirmation, 
                "usage": usage
            }
        else:
            print("‚ùå No se debe preguntar confirmaci√≥n de conocimiento")
        
    except Exception as e:
        print(f"Error en detecci√≥n de conocimiento: {e}")
        import traceback
        traceback.print_exc()
        # Continuar normalmente si falla la detecci√≥n
        pass

    return {"answer": assistant, "usage": usage}